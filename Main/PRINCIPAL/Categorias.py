# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Mantenimiento_Categorias.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import random

from PyQt5 import QtCore, QtGui, QtWidgets
from pyodbc import IntegrityError

from Main.TOOLS.Tools import Crud_DB, MessageBX


class Ui_MantenimientoCatego(object):
    def __init__(self, combobox_cate):

        # Estavariable contendra QDialog
        self.mantemini = None
        # Variable que contiene el combo box el cual se modificara
        self.combobox = combobox_cate
        # Variable temporal que contendra el codigo de Categoria
        self.TEMPORAL_CATEGORY_CODE = 0

    def setupUi(self, MantenimientoCatego):
        self.mantemini = MantenimientoCatego

        MantenimientoCatego.setObjectName("MantenimientoCatego")
        MantenimientoCatego.resize(458, 283)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/iconos/Principal.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MantenimientoCatego.setWindowIcon(icon)
        MantenimientoCatego.setStyleSheet("QPushButton{border-radius:15px;\n"
                                          "border:2px solid black;\n"
                                          "}\n"
                                          "\n"
                                          "QPushButton:hover{\n"
                                          "\n"
                                          "    background-color: rgb(2, 198, 201);\n"
                                          "}\n"
                                          "QPushButton:pressed { \n"
                                          "    \n"
                                          "    background-color: rgb(32, 90, 143);\n"
                                          "    border-style: inset;\n"
                                          "}")
        self.Fondo = QtWidgets.QLabel(MantenimientoCatego)
        self.Fondo.setGeometry(QtCore.QRect(0, 0, 461, 301))
        self.Fondo.setText("")
        self.Fondo.setPixmap(QtGui.QPixmap(":/iconos/fondo2.PNG"))
        self.Fondo.setScaledContents(True)
        self.Fondo.setObjectName("Fondo")
        self.gb_Actuales = QtWidgets.QGroupBox(MantenimientoCatego)
        self.gb_Actuales.setGeometry(QtCore.QRect(10, 150, 431, 111))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.gb_Actuales.setFont(font)
        self.gb_Actuales.setStyleSheet("color:rgb(255, 255, 255)")
        self.gb_Actuales.setObjectName("gb_Actuales")
        self.tableWidget = QtWidgets.QTableWidget(self.gb_Actuales)
        self.tableWidget.setGeometry(QtCore.QRect(10, 20, 411, 81))
        self.tableWidget.setStyleSheet("color:rgb(0, 0, 0)")
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(3)
        self.tableWidget.setRowCount(0)
        self.tableWidget.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)
        self.tableWidget.setSelectionBehavior(QtWidgets.QTableWidget.SelectRows)
        self.tableWidget.setSelectionMode(QtWidgets.QTableWidget.SingleSelection)

        ###Aplicamos un menu al tablewidget con acciones
        self.tableWidget.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.tableWidget.customContextMenuRequested.connect(self.menuAccion)
        self.tableWidget.setColumnWidth(2, 175)

        # Mostramos los datos
        self.mostrarCategorias(self.tableWidget)

        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        self.groupBox_2 = QtWidgets.QGroupBox(MantenimientoCatego)
        self.groupBox_2.setGeometry(QtCore.QRect(10, 10, 431, 81))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setStyleSheet("QGroupBox{color:rgb(255, 255, 255)\n"
                                      "\n"
                                      "}\n"
                                      "\n"
                                      "QLabel{\n"
                                      "    color:rgb(0, 0, 0);\n"
                                      "    font: 57 12pt \"Roboto\";\n"
                                      "}\n"
                                      "\n"
                                      "QLineEdit{\n"
                                      "background:transparent;\n"
                                      "border:none;\n"
                                      "border-bottom:1px solid white;\n"
                                      "    font: 57 12pt \"Roboto\";\n"
                                      "}")
        self.groupBox_2.setObjectName("groupBox_2")
        self.label_2 = QtWidgets.QLabel(self.groupBox_2)
        self.label_2.setGeometry(QtCore.QRect(30, 20, 71, 21))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(7)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.gbMP_entry_marca = QtWidgets.QLineEdit(self.groupBox_2)
        self.gbMP_entry_marca.setGeometry(QtCore.QRect(130, 20, 241, 20))
        self.gbMP_entry_marca.setText("")
        self.gbMP_entry_marca.setAlignment(QtCore.Qt.AlignCenter)
        self.gbMP_entry_marca.setObjectName("gbMP_entry_marca")
        self.label_4 = QtWidgets.QLabel(self.groupBox_2)
        self.label_4.setGeometry(QtCore.QRect(30, 50, 101, 21))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(7)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.gbMP_entry_marca_3 = QtWidgets.QLineEdit(self.groupBox_2)
        self.gbMP_entry_marca_3.setGeometry(QtCore.QRect(130, 50, 241, 20))
        self.gbMP_entry_marca_3.setText("")
        self.gbMP_entry_marca_3.setAlignment(QtCore.Qt.AlignCenter)
        self.gbMP_entry_marca_3.setObjectName("gbMP_entry_marca_3")
        self.AProductos_btn_nuevo = QtWidgets.QPushButton(MantenimientoCatego)
        self.AProductos_btn_nuevo.setGeometry(QtCore.QRect(10, 100, 101, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.AProductos_btn_nuevo.setFont(font)
        self.AProductos_btn_nuevo.setStyleSheet("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/iconos/add.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.AProductos_btn_nuevo.setIcon(icon1)
        self.AProductos_btn_nuevo.setIconSize(QtCore.QSize(30, 30))
        self.AProductos_btn_nuevo.setObjectName("AProductos_btn_nuevo")
        self.AProductos_btn_modificar = QtWidgets.QPushButton(MantenimientoCatego)
        self.AProductos_btn_modificar.setGeometry(QtCore.QRect(120, 100, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.AProductos_btn_modificar.setFont(font)
        self.AProductos_btn_modificar.setStyleSheet("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/iconos/restart.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.AProductos_btn_modificar.setIcon(icon2)
        self.AProductos_btn_modificar.setIconSize(QtCore.QSize(30, 30))
        self.AProductos_btn_modificar.setObjectName("AProductos_btn_modificar")
        self.AProductos_btn_eliminar = QtWidgets.QPushButton(MantenimientoCatego)
        self.AProductos_btn_eliminar.setGeometry(QtCore.QRect(240, 100, 101, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.AProductos_btn_eliminar.setFont(font)
        self.AProductos_btn_eliminar.setStyleSheet("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/iconos/trash.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.AProductos_btn_eliminar.setIcon(icon3)
        self.AProductos_btn_eliminar.setIconSize(QtCore.QSize(30, 30))
        self.AProductos_btn_eliminar.setObjectName("AProductos_btn_eliminar")
        self.AProductos_btn_guardar = QtWidgets.QPushButton(MantenimientoCatego)
        self.AProductos_btn_guardar.setGeometry(QtCore.QRect(350, 100, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.AProductos_btn_guardar.setFont(font)
        self.AProductos_btn_guardar.setStyleSheet("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/iconos/save.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.AProductos_btn_guardar.setIcon(icon4)
        self.AProductos_btn_guardar.setIconSize(QtCore.QSize(30, 30))
        self.AProductos_btn_guardar.setObjectName("AProductos_btn_guardar")

        self.retranslateUi(MantenimientoCatego)
        QtCore.QMetaObject.connectSlotsByName(MantenimientoCatego)

        """Se realiza las conexiones de los botones a la funcion asignada"""
        self.AProductos_btn_nuevo.clicked.connect(self.nuevoCategoria)
        self.AProductos_btn_guardar.clicked.connect(self.guardarCategoria)
        self.AProductos_btn_eliminar.clicked.connect(self.eliminarCategoria)
        self.AProductos_btn_modificar.clicked.connect(self.modificarCategoria)

    def retranslateUi(self, MantenimientoCatego):
        _translate = QtCore.QCoreApplication.translate
        MantenimientoCatego.setWindowTitle(_translate("MantenimientoCatego", "Mantenimiento Categorias"))
        self.gb_Actuales.setTitle(_translate("MantenimientoCatego", "Categorias Actuales"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MantenimientoCatego", "Código"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MantenimientoCatego", "Nombre"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MantenimientoCatego", "Descripcion"))
        self.groupBox_2.setTitle(_translate("MantenimientoCatego", "Datos"))
        self.label_2.setText(_translate("MantenimientoCatego", "Nombre:"))
        self.label_4.setText(_translate("MantenimientoCatego", "Descripcion:"))
        self.AProductos_btn_nuevo.setText(_translate("MantenimientoCatego", "Nuevo"))
        self.AProductos_btn_modificar.setText(_translate("MantenimientoCatego", "Modificar"))
        self.AProductos_btn_eliminar.setText(_translate("MantenimientoCatego", "Eliminar"))
        self.AProductos_btn_guardar.setText(_translate("MantenimientoCatego", "Guardar"))

    def nuevoCategoria(self):
        """Se bloquea los botones"""
        self.AProductos_btn_modificar.setEnabled(False)
        self.AProductos_btn_eliminar.setEnabled(False)

        """Se habilita los LineEdit"""
        self.gbMP_entry_marca.setReadOnly(False)
        self.gbMP_entry_marca_3.setReadOnly(False)

    def guardarCategoria(self):

        category_code = random.randint(1000, 9999)
        category_name = self.gbMP_entry_marca.text()
        category_description = self.gbMP_entry_marca_3.text()

        # Crea una instancia de la clase personalizada MSBOX(cuadros de dialogo)
        msbox = MessageBX()
        # Crea uns instancia de la clase que controla la base de datos
        conx = Crud_DB()

        if category_name == "" or category_description == "":
            msbox.setTxt("Aviso", "Datos Incompletos\nPor favor rellena todos los campos")
            msbox.insertIcon("../Imagenes/cancel.ico", QtWidgets.QMessageBox.Warning)
            msbox.exec_()

            self.gbMP_entry_marca.setText("")
            self.gbMP_entry_marca_3.setText("")

        else:
            try:
                query = "INSERT INTO Categoria VALUES(?,?,?) "
                param = (category_code, category_name, category_description)
                result = conx.runQuery(query, parameters=param)

                if result:
                    msbox.setTxt("Exito", f"La categoria {category_name} se ha guardado con exito!")
                    msbox.insertIcon("../Imagenes/accept.ico", QtWidgets.QMessageBox.Information)
                    msbox.exec_()

                    self.gbMP_entry_marca.setText("")
                    self.gbMP_entry_marca_3.setText("")

                    self.actualizarTabla()
                    self.updateComboBox()

                    """Se Habilita  los botones"""
                    self.AProductos_btn_modificar.setEnabled(True)
                    self.AProductos_btn_eliminar.setEnabled(True)

                    """Se procede a actualizar el combo box"""
                    self.updateComboBox()



            except Exception as e:
                msbox.setTxt("Error", f"Informar al desarrollador\n{e.__str__()}")
                msbox.insertIcon("../Imagenes/cancel.ico", QtWidgets.QMessageBox.Error)
                msbox.exec_()

        del msbox, conx  # Para no ocupar la memoria se elimina las ainstancias

    def eliminarCategoria(self):
        dialogos = MessageBX()
        conexion = Crud_DB()

        name = self.gbMP_entry_marca.text()
        desc = self.gbMP_entry_marca_3.text()

        if name != "" and desc != "":
            pregunta = QtWidgets.QMessageBox().warning(None, "Aviso",
                                                       f"¿Desea eliminar la categoria {name}?",
                                                       QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                                                       QtWidgets.QMessageBox.Yes)



            if pregunta == QtWidgets.QMessageBox.Yes:
                try:
                    query = "DELETE FROM Categoria WHERE Id = ? "
                    paramt = (self.TEMPORAL_CATEGORY_CODE,)

                    result = conexion.runQuery(query, paramt, select=False)

                    if result:
                        dialogos.setTxt("Exito", f"La categoria {name} fue eliminada con exito!")
                        dialogos.insertIcon("../Imagenes/accept.ico", QtWidgets.QMessageBox.Information)
                        dialogos.exec_()

                        self.actualizarTabla()
                        self.updateComboBox()

                except IntegrityError:
                    dialogos.setTxt("Exito", f"La categoria {name} Esta asociada a un producto por lo cual\nprimero debe eliminarse el producto!")
                    dialogos.insertIcon("../Imagenes/accept.ico", QtWidgets.QMessageBox.Information)
                    dialogos.exec_()


        else:
            dialogos.setTxt("Error", "No haz seleccionado un item")
            dialogos.insertIcon("../Imagenes/cancel.ico", QtWidgets.QMessageBox.Warning)
            dialogos.exec_()

        self.gbMP_entry_marca.clear()
        self.gbMP_entry_marca_3.clear()

    def modificarCategoria(self):

        conx = Crud_DB()
        msbox = MessageBX()

        try:

            new_name = self.gbMP_entry_marca.text()
            new_desc = self.gbMP_entry_marca_3.text()

            if new_name == "" or new_desc == "":
                msbox.setTxt("Error", "No haz seleccionado ningun Item")
                msbox.insertIcon("../Imagenes/cancel.ico", QtWidgets.QMessageBox.Warning)
                msbox.exec_()
            else:

                try:
                    """Se empieza a actualizar la base de datos"""
                    query = "UPDATE Categoria SET Nombre = ?, Descripcion = ? WHERE Id = ?"
                    result = conx.runQuery(query, (new_name, new_desc, self.TEMPORAL_CATEGORY_CODE), select=False)

                    if result:
                        msbox.setTxt("Exito", f"La categoria {self.TEMPORAL_CATEGORY_CODE} fue actualizada con exito!")
                        msbox.insertIcon("../Imagenes/accept.ico", QtWidgets.QMessageBox.Information)
                        msbox.exec_()

                        self.actualizarTabla()
                        self.updateComboBox()

                except Exception as e:
                    msbox.setTxt("Error", f"Informar al desarrollador\n{e.__str__()}")
                    msbox.insertIcon("../Imagenes/cancel.ico", QtWidgets.QMessageBox.Error)
                    msbox.exec_()

        except IndexError:
            msbox.setTxt("Error", f"No haz seleccionado ningun Item")
            msbox.insertIcon("../Imagenes/cancel.ico", QtWidgets.QMessageBox.Error)
            msbox.exec_()

        except Exception as e:
            print(type(e).__name__)

    def actualizarTabla(self):
        self.tableWidget.clearContents()

        self.mostrarCategorias(self.tableWidget)

    def mostrarCategorias(self, table):
        conx = Crud_DB()
        query = "SELECT * FROM Categoria;"

        # Obtenemos las categorias de la base de datos
        result = conx.runQuery(query, (), select=True)

        fila = 0
        for row in result:
            table.setRowCount(fila + 1)
            table.setItem(fila, 0, QtWidgets.QTableWidgetItem(str(row[0])))
            table.setItem(fila, 1, QtWidgets.QTableWidgetItem(row[1]))
            table.setItem(fila, 2, QtWidgets.QTableWidgetItem(row[2]))

            fila += 1

    def menuAccion(self, posicition):
        self.menu = QtWidgets.QMenu()

        itemsGroup = QtWidgets.QActionGroup(self.mantemini)
        itemsGroup.setExclusive(True)

        self.menu.addAction(QtWidgets.QAction("Seleccionar Fila", itemsGroup))

        itemsGroup.triggered.connect(self.seleccionarFila)
        self.menu.exec_(self.tableWidget.viewport().mapToGlobal(posicition))

    def seleccionarFila(self):
        """Hablitar los QLineEdit"""
        self.gbMP_entry_marca.setReadOnly(False)
        self.gbMP_entry_marca_3.setReadOnly(False)

        itm = []  # Lista que contendram los items seleccionados
        for item in self.tableWidget.selectedItems():  # Con for se recorre la fila seleccionada
            itm.append(item.text())  # Se agraga cada item pero convirtiendolo a un string

        self.TEMPORAL_CATEGORY_CODE = int(itm[0])
        self.gbMP_entry_marca.setText(itm[1])  # Se establece el texto
        self.gbMP_entry_marca_3.setText(itm[2])

    def updateComboBox(self):
        conx = Crud_DB()
        query = "EXEC usp_todasCategorias"

        # Obtenemos las categorias de la base de datos

        data = []
        result = conx.runQuery(query, (), select=True)
        for cat in result:
            data.append(cat[1])

        self.combobox.clear()
        self.combobox.addItems(data)


class Categorias_Init(QtWidgets.QDialog):
    def __init__(self, cbm_cate):
        super().__init__()
        self.cbm = cbm_cate
        self.win = Ui_MantenimientoCatego(self.cbm)

    def iniciar(self):
        self.win.setupUi(self)

        "Se bloquea los LineEdit al comenzar la ventana"
        self.win.gbMP_entry_marca.setReadOnly(True)
        self.win.gbMP_entry_marca_3.setReadOnly(True)

        self.show()

    def buscarCategoria(self, cod, lbl_cd, lbl_nombre, lbl_desc):
        conx = Crud_DB()

        if cod == "":
            lbl_cd.setText("No encontrado")
            lbl_nombre.setText("No encontrado")
            lbl_desc.setText("No encontrado")

        else:
            try:
                query = "SELECT * FROM Categoria WHERE Id = ?"

                # Obtenemos las categorias de la base de datos
                result = conx.runQuery(query, (cod,), select=True)
                print(result)

                lbl_cd.setText(str(result[0][0]))
                lbl_nombre.setText(str(result[0][1]))
                lbl_desc.setText(str(result[0][2]))

            except Exception as e:
                print(e)
                lbl_cd.setText("No encontrado")
                lbl_nombre.setText("No encontrado")
                lbl_desc.setText("No encontrado")

        del conx
